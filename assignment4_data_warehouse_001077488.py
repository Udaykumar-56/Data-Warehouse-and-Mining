# -*- coding: utf-8 -*-
"""Assignment4_Data Warehouse_001077488

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dy7R47GfW8x-FpY-IB_yEG7sLNbnlj6C
"""

# Import necessary libraries
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load the iris dataset
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Split the dataset into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the Decision Tree Classifier with specific parameters
clf = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=42)

# Train the classifier on the training data
clf.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = clf.predict(X_test)

# Calculate the classification accuracy
accuracy = accuracy_score(y_test, y_pred)

# Output the classification accuracy
print(f'Classification accuracy: {accuracy:.2f}')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load and preprocess the data
data_url = "http://lib.stat.cmu.edu/datasets/boston"
raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
target = raw_df.values[1::2, 2]

# Split the dataset into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.3, random_state=42)

# Implement the linear regression algorithm from scratch
class LinearRegression:
    def __init__(self):
        self.coefficients = None

    def fit(self, X, y):
        # Add a bias column of ones to the input data
        X = np.insert(X, 0, 1, axis=1)
        # Calculate the coefficients using the normal equation
        self.coefficients = np.linalg.inv(X.T @ X) @ X.T @ y

    def predict(self, X):
        # Add a bias column of ones to the input data
        X = np.insert(X, 0, 1, axis=1)
        # Calculate the predicted values
        return X @ self.coefficients

# Initialize the linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)

# Output the mean squared error
print(f'Mean Squared Error: {mse:.2f}')